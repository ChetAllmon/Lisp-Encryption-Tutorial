;Lisp Encryption Tutorial by Chet Allmon is licensed under a Creative Commons Attribution 4.0 International License.

;Written by Chet Allmon at San Diego Mesa Community College

(require racket)

;Code

(check-expect (encode-one-letter "A")   65)
(check-expect (encode-one-letter "F")   70)
(check-expect (encode-one-letter "Z")   90)

(define (encode-one-letter letter) 
  (string->int letter))

(check-expect (encrypt-one-letter "A" 1) "B")
(check-expect (encrypt-one-letter "F" 1) "G")
;(check-expect (encrypt-one-letter "Z" 1) "A") ;Throws an error, "A" is expected, returned "["

(define (encrypt-one-letter letter key)
  (int->string (+ (string->int letter) key)))

;The above code works, however, if we try to change "Z", it does not go to "A" like we want. This is because of the ascii table. Z is 90 on the acsii table, And [ is 91.
;So we have to account for the loop around of the alphabet. We can do this using modulo, which returns the remainder of 2 numbers. (modulo 5 3) = 2
;Note that (modulo (0-25) 26) will return the number given (0-25) (modulo 20 26) = 20, etc. However (modulo 26 26) = 0; Which brings us back to "A".

(check-expect (encrypt-one-letter-with-modulo "A" 1) "B")
(check-expect (encrypt-one-letter-with-modulo "F" 1) "G")
(check-expect (encrypt-one-letter-with-modulo "Z" 1) "A") ;No error thrown!

(define (encrypt-one-letter-with-modulo letter key)
  (int->string (+ (string->int "A") (modulo (- (+ (string->int letter) key) (string->int "A")) 26))))


;---------------------------------------------------------------

(check-expect (decode-one-letter "A")   65)
(check-expect (decode-one-letter "F")   70)
(check-expect (decode-one-letter "Z")   90)

;NOTE: this is THE SAME FUNCTION as the encode function. 
(define (decode-one-letter letter) 
  (string->int letter))

(check-expect (decrypt-one-letter "B" 1) "A")
(check-expect (decrypt-one-letter "F" 1) "E")
;(check-expect (decrypt-one-letter "A" 1) "Z") ;Throws an error, "Z" is expected, returned "@"

(define (decrypt-one-letter letter key)
  (int->string (- (string->int letter) key)))

(check-expect (decrypt-one-letter-with-modulo "B" 1) "A")
(check-expect (decrypt-one-letter-with-modulo "G" 1) "F")
(check-expect (decrypt-one-letter-with-modulo "A" 1) "Z") ;No error thrown!

(define (decrypt-one-letter-with-modulo letter key)
  (int->string (+ (string->int "A") (modulo (- (- (string->int letter) key) (string->int "A")) 26))))

(encrypt-one-letter-with-modulo "A" 1)
(decrypt-one-letter-with-modulo "B" 1)


;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;Step2-Putting it all together

(check-expect ((encode-character-function 1) "A") "B") 

(define (encode-character-function key)
  (lambda(letter) (int->string (+ (string->int "A") (modulo (- (+ (string->int letter) key) (string->int "A")) 26)))))

(define (encrypt-message message key)
  (implode (map (encode-character-function key) (explode message))))

(encrypt-message "HELLO" 1)

(define (decode-character-function key)
  (lambda(letter) (int->string (+ (string->int "A") (modulo (+ (- (string->int letter) key) (string->int "A")) 26)))))
 
(define (decrypt-message message key)
  (implode (map (decode-character-function key) (explode message))))

(decrypt-message "IFMMP" 1)

(encrypt-message "HOWAREYOU" 5)
(decrypt-message "MTBFWJDTZ" 5)

(encrypt-message "ABCDEFGHIJKLMNOPQRSTUVWXYZ" 1)
(decrypt-message "BCDEFGHIJKLMNOPQRSTUVWXYZA" 1)


;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; 3. Modern encryption - using random numbers
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

(define key 10)

(random-seed key)


(define (lock) (random 26))

lock ; This gives the value (key) to shift the messages characters by. 


(check-expect (encode-char "B") "C")
(check-expect (encode-char "L") "E")

(check-expect (decode-char "C") "J")
(check-expect (decode-char "B") "O")



(define (encode-char char)
  (int->string (+ (string->int "A") (modulo (- (+ (string->int char) (lock)) (string->int "A")) 26))))

(define (decode-char char)
  (int->string (+ (string->int "A") (modulo (- (- (string->int char) (lock)) (string->int "A")) 26))))



(check-expect ((encode-char-function) "A") "U")
(check-expect ((encode-char-function) "B") "U")

(check-expect ((decode-char-function) "D") "G")
(check-expect ((decode-char-function) "Z") "T")
(check-expect ((decode-char-function) "D") "J") 

(define (encode-char-function)
  (lambda(letter) (int->string (+ (string->int "A") (modulo (- (+ (string->int letter) (lock)) (string->int "A")) 26)))))

(define (encrypt-message-rand message)
  (implode (map (encode-char-function) (explode message))))


(encrypt-message-rand "HELLO")

(define (decode-char-function)
  (lambda(letter) (int->string (+ (string->int "A") (modulo (+ (- (string->int letter) (lock)) (string->int "A")) 26)))))
 
(define (decrypt-message-rand message)
  (implode (map (decode-char-function) (explode message))))


(random-seed key)
(decrypt-message-rand "KJLEY")
"-------------------"
(random-seed key)
(encrypt-message-rand "AAAAA")
(random-seed key)
(decrypt-message-rand "DFATK")
               

(set! key 5) ; This redefines key to be 5
(random-seed key)
"----------------------"
(encrypt-message-rand "HELLO")
(random-seed key)
(decrypt-message-rand "RHGJX")
